require 'time'
require 'openssl'
require 'digest/sha1'
require 'digest/sha2'
require 'xmlenc'
require 'nokogiri'
require 'omniauth/strategies/latvija/response'
require 'omniauth/strategies/latvija/decryptor'
require 'omniauth/strategies/latvija/signed_document'

module OmniAuth::Strategies
  #
  # Authenticate with Latvija.lv.
  #
  # @example Basic Rails Usage
  #
  #  Add this to config/initializers/omniauth.rb
  #
  #    Rails.application.config.middleware.use OmniAuth::Builder do
  #      provider :latvija, {
  #        endpoint:    "https://epaktv.vraa.gov.lv/IVIS.LVP.STS/Default.aspx",
  #        certificate: File.read("/path/to/cert"),
  #        private:     File.read("/path/to/private_key"),
  #        realm:       "urn:federation:example.com"
  #      }
  #    end
  #
  class Latvija
    include OmniAuth::Strategy
    class ValidationError < StandardError; end

    option :realm, nil
    option :wfresh, false
    option :endpoint, nil
    option :certificate, nil
    option :private_key, nil

    info do
      {
        name: full_name,
        first_name: raw_info['givenname'],
        last_name: raw_info['surname'],
        private_personal_identifier: raw_info['privatepersonalidentifier']
      }
    end

    extra do
      {
        raw_info: raw_info,
        authentication_method: @response.authentication_method,
        original_issuer: @response.original_issuer,
        legacy_uids: legacy_uids
      }
    end

    def request_phase
      params = {
        wa: 'wsignin1.0',
        wct: Time.now.utc.strftime('%Y-%m-%dT%H:%M:%SZ'),
        wtrealm: options[:realm],
        wreply: callback_url,
        wctx: callback_url,
        wreq: '<trust:RequestSecurityToken xmlns:trust="http://docs.oasis-open.org/ws-sx/ws-trust/200512"><trust:Claims xmlns:i="http://schemas.xmlsoap.org/ws/2005/05/identity" Dialect="http://schemas.xmlsoap.org/ws/2005/05/identity"><i:ClaimType Uri="http://docs.oasis-open.org/wsfed/authorization/200706/claims/action" Optional="false" /></trust:Claims><trust:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</trust:RequestType></trust:RequestSecurityToken>'
      }
      params[:wfresh] = options[:wfresh] if options[:wfresh]
      query_string = params.collect { |key, value| "#{key}=#{Rack::Utils.escape(value)}" }.join('&')
      redirect "#{options[:endpoint]}?#{query_string}"
    end

    def callback_phase
      if request.params['wresult']
        @response = OmniAuth::Strategies::Latvija::Response.new(
          request.params['wresult'],
          certificate: options[:certificate],
          private_key: options[:private_key]
        )
        @response.validate!
        super
      else
        fail!(:invalid_response)
      end
    rescue Exception => e
      fail!(:invalid_response, e)
    end

    def raw_info
      @response.attributes
    end

    def uid
      "PK:#{raw_info['privatepersonalidentifier']}"
    end

    def full_name
      @full_name ||= "#{raw_info['givenname']} #{raw_info['surname']}"
    end

    def legacy_uids
      # UIDs that could have been assigned to this identity by previous versions of the gem, or due to peronal identifier change

      legacy_uids = [
        "#{full_name}, #{raw_info["privatepersonalidentifier"]}", # generated by gem version <= 4.0
        @response.name_identifier # VPM internal UID fallback, generated by gem version <= 6.3.0
      ]

      raw_info.fetch('historical_privatepersonalidentifier', []).each do |historical_identifier|
        legacy_uids << "#{full_name}, #{historical_identifier}" # generated by gem version <= 4.0
        legacy_uids << "PK:#{historical_identifier}" # due to personal identifier change
      end

      legacy_uids
    end
  end
end
